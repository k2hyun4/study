## 애플리케이션 서버
* 클라이언트와 서버 사이에서 업무 처리를 전담하는 서버
***

## 웹 서버
* 클라이언트와 통신을 전담(네트워크, 멀티쓰레드)
* 클라이언트 ↔ 웹 서버 ↔ 애플리케이션 서버 ↔ DBMS 서버
***

## GET Request
* HTTP 사양에서는 요청라인, 헤더 필드의 최대 크기 제한이 없음
* 웹 서버 측에서 제한
***

## CGI(Common Gateway Interface)
* 웹 서버와 프로그램 사이의 데이터를 주고 받는 규칙
***

## 서블릿(Servlet)
* 자바로 만든 CGI 프로그램(컴파일 방식)
* 다른 CGI 프로그램과 달리, 웹 서버와 직접 데이터를 주고받지 않으며, 서블릿 컨테이너가 이를 대신해줌
### Life Cycle
* init - service - destroy
### 서블릿 컨테이너
* WAS(Web Application Server) : Java EE 기술 사양을 준수하여 만든 서버(제우스, 웹로직, 웹스피어, Geronimo 등)
* 서블릿 컨테이너 : Java EE 기술 중 서블릿, JSP 등 웹 관련 부분만 구현한 서버(톰캣, Jetty 등)
### GenericServlet
* interface인 Servlet의 method 대부분을 구현한 추상 클래스
* service method만 override해주면 구현 가능
### Servlet 선언
* in web.xml or @WebServlet
***

## Java EE(Java Platform, Enterprise Edition)
### 확인 위치
1. https://www.oracle.com/index.html
2. Menu - Developers - Downloads
3. Java - Java EE & GlassFish Server
4. Technologies 탭
***

## WebContent/WEB-INF
* 웹 애플리케이션의 설정과 관련된 파일을 두는 폴더. 클라이언트에서 요청 불가한 위치
***

## 배치
### 경로
* workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp{index}\wtpwebapps\{프로젝트명}
* WebContent 의 폴더 및 파일들 + build의 폴더 및 파일들(WEB-INF 하위로)

### 서버 자체 배치
1. war 파일 생성
2. 톰캣 홈\webapps 로 이동
3. 톰캣 홈\startup.bat 으로 서버 구동
***

### 한글 인코딩
* response.setContentType("text/plain;charset=UTF-8");
### GET 방식에서 한글처리가 가끔 안되는 경우
* tomcat에서 HTTP body의 기본 디코딩은 **UTF-8**이지만 URL의 기본 디코딩은 **ISO-8859-1**
* 해결방안 : server.xml - <Connector> 내 URIEncoding="UTF-8" 옵션을 추가해준다.
***

## 절대경로, 상대경로
* 절대경로 : /URL
* 상대경로 : URL

***

## 화면 refresh하기
### 1. HttpServletResponse의 addHeader 메소드 이용
* response.addHeader("Refresh", "{초};url={url}");
* 이 함수를 이용하여 response 객체에 다양한 header 정보 추가 가능

### 2. meta 태그 이용
* meta http-equiv='Refresh' content='{초};url={url}'
* head 태그 안에 선언해야 함

***
## 초기화 매개변수를 이용한 db connection
1. web.xml의 servlet 태그 안에 init-param을 이용해 접속정보 선언
2. 서블릿 클래스에서 getInitParameter(String name) 를 이용해 가져옴
3. DriverManager.registerDriver(new 드라이버생성자) 대신 Class.forName({드라이버 클래스 QName})으로 동적 로딩
* Class.forName({클래스 QName})은 해당 클래스의 생성자를 제외, static 필드 부분을 실행함

***
## 컨텍스트 초기화 매개변수 이용한 db connection
1. web.xml에 context-param 을 이용해 접속정보 선언
2. 서블릿 클래스에서 this.getServletContext().getInitParameter(String name) 를 이용해 가져옴
***

## JSP
### 1. 구동 과정
* JSP 엔진이 JSP 파일로부터 Servlet-JspPage-HttpJspPage 인터페이스를 구현한 자바 소스를 생성
* 위 과정에서 여러가지 내장 객체들(request, response, application 등)이 호출되기 때문에 jsp 파일에서 별다른 선언없이 사용 가능

### 2. JSP 전용 태그
* 지시자 <%@ 지시자... %>
* 스크립트릿 <% 자바코드 %>
* 선언문 <%! 멤버변수 및 메서드 선언 %>
* 표현식 <%= 결과를 반환하는 자바 표현식 %> - 출력문으로 만들어짐

### 3. JSP로 전달
* Servlet 클래스에서 request.getRequestDispather({jsp경로}).{foword|include});
* 제어권을 넘길 경우 forword
* 제어권을 되받아올 경우 include. Header.jsp, Tail.jsp 등을 사용할 때 용이

### 4. JSP 액션 태그
* <jsp:액션 태그명>

*** 

## 데이터 보관소
### 1. ServletContext
* 생성 : 웹 애플리케이션이 시작될 때
* 종료 : 웹 애플리케이션이 종료될 때

### 2. HttpSession
* 생성 : 클라이언트의 최초 요청이 들어올 때
* 종료 : 클라이언트가 종료될 때

### 3. ServletRequest
* 생성 : 클라이언트의 요청이 들어올 때
* 종료 : 클라이언트에게 응답할 때

### 4. JspContext
* 생성 : JSP페이지 실행될 때
* 종료 : JSP 페이지 종료될 때

***

## EL(Expression Language)
* ${표현식} : 즉시 적용
* #{표현식} : 지연 적용
* JSP에서 제공하는 객체명이 존재함

   **ex)**

   ServletReqeuset 객체를 사용할 때 : ${pageContext.request.객체명}

   request 보관소의 값을 조회할 때 : ${requestScope.객체명}

* List 객체에서 값 꺼내기 : ${리스트 객체명[인덱스]}
* Map 객체에서 값 꺼내기 : ${맵 객체명.키값}

***

## JSTL(JSP Standard Tag Library)
* 별도의 library 파일을 받아야 함
* <c:forEach> 같은 애들

***
## 리스너
* 특정 사건 별 알림을 받는 인터페이스

## DB Connection Pool
* 싱글 커넥션 사용 중 롤백시 해당 커넥션의 모든 작업이 롤백됨
* 각 작업별로 커넥션을 생성하는 것은 비효율적
* 미리 여러 개의 커넥션을 만들고, Pool에 보관, 재활용

## DataSource
* JDK 1.4부터 포함(in javax.sql package)
* 서버에서 관리(DriverManager 는 코드에서 관리했었음)
* Connection, Statement 객체를 pooling해줌
* 분산 트랜잭션 처리 가능(...)
* DBCP : DataBase Connection Pooling services
* 커넥션 요청 및 반환시 커넥션 대행 객체(Proxy Object)를 이용
* 위 객채에 진짜 커넥션의 참조 변수와 커넥션풀의 참조변수가 존재
* 톰캣 서버가 db 커넥션을 관리할 수 있도록 설정 가능(p.418~)

***
## JNDI(Java Naming and Directory Interface)
* 디렉터리 서비스에서 제공하는 데이터 및 객체를 발견(discover)하고 참고(lookup)하기 위한 API

* **java:comp/env** : 응용 프로그램 환경 항목. 리소스의 가상 디렉터리 경로라고 생각하면 됨
* 사용방법
1. 서버의 context.xml -> Resource 태그를 이용하여 정보 입력
2. DD파일(web.xml) -> 서버 자원 참조 선언(resource-ref 태그)
3. 사용 클래스 -> InitialContext의 인스턴스.lookup({경로})

***

## HttpServletRequest의 메서드들
* 예제 URL : http://localhost:9999/web06/member/list.do?pageNo=1&pageSize=10

**1. getRequestURL()**
* http://localhost:9999/web06/member/list.do

**2. getRequestURI()**
* /web06/member/list.do

**3. getServletPath()**
* /member/list.do

**4. getQueryString()**
* pageNo=1&pageSize=10

***

## 의존성 주입(Dependency Injection)
* ⊃ 역 제어(IoC : Inversion of Contorl)
* Java Beans Container 에서 의존 객체를 전문적으로 관리
### 의존성 주입의 이점
* 의존 관계 설정이 컴파일시가 아닌 실행시에 이루어져 모듈들간의 결합도 를 낮출 수 있다.
* 코드 재사용을 높여서 작성된 모듈을 여러 곳에서 소스코드의 수정 없이 사용할 수 있다.
* 모의 객체 등을 이용한 단위 테스트의 편의성을 높여준다.
* reference : https://ko.wikipedia.org/wiki/%EC%9D%98%EC%A1%B4%EC%84%B1_%EC%A3%BC%EC%9E%85
***

## Reflection API
* 클래스나 메서드의 내부 구조를 들여다보는 API

**1. Object Class.newInstance()**
* 주어진 클래스의 인스턴스를 생성

**2. String Class.getName()**
* 클래스의 이름을 반환

**3. Method[] Class.getMethod()**
* 클래스에 선언된 모든 public 메서드의 목록을 배열로 반환

**4. Object Method.invoke(Object obj, Object... args)**
* 해당 메서드를 호출
* 첫 파라미터는 메서드를 실행시킬 obj, 나머지는 해당 메서드의 파라미터들

**5. Class<?>[] Method.getParameterTypes()**
* 메서드의 매개변수 목록을 배열로 반환

***

## 퍼시스턴스(Persistence)
* 데이터의 지속성을 의미
* 애플리케이션을 종료하고 다시 실행하더라도 이전에 저장한 데이터를 다시 불러올 수 있는 기술...

## 퍼시스턴스 프레임워크
### 1. SQL mapper
* SQL 문자응로 직접 DB 데이터를 다룸
* mybatis

### 2. Object-Relational mapper
* 자바 객체를 통해 간접적으로 DB 데이터를 다룸
* Hibernate, TopLink
* 보다 간편하지만 DB의 정규화가 잘 되어있어야 함

***

## SqlSession 얻기
* ClassPath에 mybatis 설정 파일 생성
* Resoure.getResourceAsStream({경로}) 를 통해 inputStream get
* new SqlSessionFactoryBuilder().build(inputStream) 을 통해 SqlSessionFactory get
* sqlSessionFactory.openSession() 을 통해 SqlSession get

***

## mybatis 설정 파일
### 1. environment 태그
* 트랜잭션 관리 및 데이터 소스를 설정
* JDBC 관리유형 : 직접 JDBC의 커밋, 롤백 기능을 사용하며 mybatis에서 자체적으로 관리
* MANAGED 관리유형 : 서버의 트랜잭션 관리 기능을 이용

### 2. 데이터 소스 설정
* UNPOOLD
* POOLED : 미리 커넥션 객체를 생성, 관리
* JNDI : 앱서버나 서블릿 컨테이너에서 제공하는 데이터 소스를 사용

### 3. 로그 출력 켜기
* mybatis 설정 파일 내 setting 태그 활용
* LOG4J, STDOUT_LOGGING, SLF4J 등등
* 로그 설정 파일 작성 필요(로그 출력 등급, 출력자, 출력 포맷 등)

***

## ApplicationContext
* IoC 컨테이너가 갖추어야 할 기능들을 정의해 둔 인터페이스
* ClassPathXmlApplicationContext : 클래스 패스의 xml 파일을 이용
* FileSystemXmlApplication : 파일 시스템 경로의 xml 파일을 이용
* WebApplicationContext : web.xml 파일을 이용

### 클래스 패스
* JVM이 클래스를 찾을 때 참고하는 폴더 목록
* 'CLASSPATH' 라는 이름으로 운영체제의 환경변수에 등록할 경우 검색 가능
* JVM 실행시 인자값으로 클래스 경로를 전달해도 가능
* 클래스 파일 찾는 순서 : 부트스트랩 -> 확장 라이브러리 -> CLASSPATH

### 활용(bean 태그)
* 자바 소스에서 getBean({bean name}) 으로 가져옴(id, name 둘 다)

**1. 생성자 파라미터 전달**
* constructor-arg 태그 이용
* xmlns:{네임스페이스명}="http://www.springframework.org/schema/p 선언 후 {네임스페이스명}:{파라미터명}

**2. setter 파라미터 전달**
* property 태그 이용
* xmlns:{네임스페이스명}="http://www.springframework.org/schema/c 선언 후 {네임스페이스명}:{setter명}
* 객체를 set할 때 : property 내 ref 태그 활용
* collection api 전달도 가능(p.734~)

***

### 객체 비교
* '==' : 두 객체의 주소가 같음
* equals() == true, hashcode() 값이 같음 : 두 객체가 같은 내용을 가짐

***

### annotation을 이용한 주입
* context:annotation-config 선언 필요

**1. @Autowired**
* 해당 annotation이 붙은 프로퍼티에 대해 의존객체를 찾아 주입(타입 비교해서)
* 해당 타입을 찾지 못할 경우 에러 발생. (required=false) 해주면 예외처리 가능

**2. @Qualifier**
* 빈의 id, name 지정 가능

**3. @Resource**
* @Autowired + @Qualifier
* 단, 프로퍼티 값이 무조건 필수
